{"version":3,"sources":["Header.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","alpha","palette","common","white","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","SearchAppBar","props","classes","className","AppBar","Toolbar","IconButton","href","Home","Typography","variant","Search","onSubmit","InputBase","value","text","onChange","placeholder","input","inputProps","target","GitHub","apikey","require","colors","split","url","getSeason","i","Season","params","axios","get","CommentForm","setText","console","log","setState","state","rows","show","seasons","bind","event","preventDefault","this","s","then","x","data","imdbID","getShow","totalSeasons","requests","push","all","spread","responses","map","response","getAll","Number","length","Grid","container","justify","filter","tile","Poster","item","onClick","handleSelect","src","alt","Title","Box","component","numbers","forEach","season","row","Episodes","episode","Episode","imdbRating","Math","max","Object","keys","columns","field","headerName","index","process","id","epNumbers","temp","Array","prototype","concat","n","parseInt","renderCell","Tooltip","JSON","stringify","autoHeight","getCellClassName","ImageGridList","RatingsMap","React","Component","withStyles","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.2be20de4.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport { alpha, makeStyles } from '@material-ui/core/styles';\nimport { GitHub, Home, Search } from '@material-ui/icons';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: alpha(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: alpha(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(1),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: '12ch',\n            '&:focus': {\n                width: '20ch',\n            },\n        },\n    },\n}));\n\nexport default function SearchAppBar(props) {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar>\n                <Toolbar>\n                    \n                    <IconButton\n                        color=\"inherit\"\n                        href='https://georgefane.github.io/'\n                    >\n                        <Home />\n                    </IconButton>\n\n                    <Typography variant=\"h6\" className={classes.title}>\n                        RatingsMap\n                    </Typography>\n\n                    <div className={classes.search}>\n                        <div className={classes.searchIcon}>\n                            <Search />\n                        </div>\n\n                        <form onSubmit={props.onSubmit}>\n                            <InputBase\n                                value={props.text}\n                                onChange={props.onChange}\n                                placeholder=\"Search Show\"\n                                classes={{\n                                    root: classes.inputRoot,\n                                    input: classes.inputInput,\n                                }}\n                                inputProps={{ 'aria-label': 'search' }}\n                            />\n                        </form>\n                    </div>\n\n                    <IconButton\n                        color=\"inherit\"\n                        href='https://github.com/GeorgeFane/ratingsmap'\n                        target='_blank'\n                    >\n                        <GitHub />\n                    </IconButton>\n\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n","import React from \"react\";\nimport axios from \"axios\";\n\nimport { TextField, Box, Grid, Toolbar, Tooltip, Typography } from '@material-ui/core';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { withStyles, createMuiTheme } from '@material-ui/core/styles';\n\nimport Header from './Header';\n\nconst { apikey } = require('./env.json');\n\nvar colors = 'darkGreen darkGreen green goldenRod darkGoldenRod indianRed fireBrick fireBrick fireBrick fireBrick fireBrick'.split(' ');\nconst useStyles = theme => {\n    var root = { padding: theme.spacing(3) };\n    colors.forEach(color => {\n        root['& .' + color] = { backgroundColor: color };\n    })\n    return { root: root };\n};\n\n// api functions\nconst url = 'https://www.omdbapi.com/';\n\nfunction search(s) {\n    const params = { apikey, s };\n    return axios.get(url, { params })\n        .then(x => x.data.Search || []);\n}\n\nfunction getShow(i) {\n    const params = { apikey, i };\n    return axios.get(url, { params })\n        .then(x => x.data || []);\n}\n\nfunction getSeason(i, Season) {\n    const params = { apikey, i, Season };\n    return axios.get(url, { params });\n}\n\nfunction getAll(imdbID, totalSeasons) {\n    var requests = [];\n    for (var i = 0; i < totalSeasons; i++){\n        requests.push(\n            getSeason(imdbID, i + 1)\n        );\n    }\n    return axios.all(requests)\n        .then(axios.spread( (...responses) => (\n            responses.map(response => response.data) \n        )));\n}\n\nclass CommentForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: '',\n            rows: [],\n            show: {},\n            seasons: [],\n        }\n\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    setText = text => {\n        console.log(text);\n        this.setState({ text });\n    };\n    \n    // hooks\n\n    onChange(event) { \n        event.preventDefault();     // prevents page from reloading on submit\n        const text = event.target.value;\n        console.log(text);\n        this.setState({ text });\n    }\n\n    onSubmit(event) { \n        event.preventDefault();     // prevents page from reloading on submit\n        search(this.state.text)\n            .then(x => {\n                this.setState({ rows: x });\n            });\n    }\n    \n    handleSelect(imdbID) {\n        getShow(imdbID)\n            .then(x => {\n                this.setState({ show: x });\n\n                getAll(\n                    this.state.show.imdbID,\n                    Number(this.state.show.totalSeasons),\n                )\n                    .then(x => {\n                        this.setState({ seasons: x });\n                    });\n            });        \n    }\n\n    // components\n\n    ImageGridList() {\n        if (this.state.rows.length) {\n            return (\n                <Grid container justify='left' spacing={2}>\n                    {this.state.rows\n                        .filter(tile => tile.Poster !== 'N/A')\n                        .map((tile) => (\n                            <Grid item onClick={() => this.handleSelect(tile.imdbID)}>\n                                <img src={tile.Poster} alt={tile.Title} width={144} />\n                            </Grid>\n                        )\n                    )}\n                </Grid>\n            );\n        }\n        \n        <Box component=\"div\" display=\"inline\">inline</Box>\n        return this.state.rows\n            .map((tile) => (\n                <Box component=\"div\" display=\"inline\">\n                    <img src={tile.Poster} alt={tile.Title} width={99} />\n                </Box>\n            ));\n    }\n    \n    process() {\n        var seasons = this.state.seasons;\n        if (!seasons.length){\n            return false;\n        }\n    \n        var rows = []\n        var numbers = [];\n        seasons.forEach(season => {\n            var row = {};\n            const episodes = season.Episodes || [];\n            episodes.forEach(episode => {\n                row[episode.Episode] = episode.imdbRating\n            });\n            rows.push(row);\n    \n            numbers.push(\n                Math.max( ...Object.keys(row).map(Number) )\n            );\n        })\n        \n        var max = Math.max( ...numbers );\n        var columns = [{ \n            field: 'id',\n            headerName: 'Season',\n        }]\n        for (var i = 1; i < max + 1; i++){\n            columns.push({\n                field: i,\n                headerName: 'E' + i,\n            });\n        }\n        \n        rows.forEach((row, index) => row['id'] = index + 1);\n    \n        return {\n            rows: rows,\n            columns: columns,\n        };\n    }\n\n    RatingsMap() {\n        const data = this.process();\n        if (!data){\n            return <div></div>;\n        }\n        \n        const { classes } = this.props;\n        const { seasons } = this.state;\n        const rows = seasons.map( (season, id) => {\n            var row = { id };\n            season.Episodes.forEach(episode => {\n                row[episode.Episode] = episode;\n            });\n            return row;\n        });\n        console.log(rows);\n\n        const epNumbers = rows.map(row => Object.keys(row));\n        const temp = Array.prototype.concat(...epNumbers);\n        const max = Math.max(...temp\n            .filter(n => n !== 'id')\n            .map(n => parseInt(n)));\n\n        const renderCell = params => (            \n            <Tooltip title={(\n                <Typography component='pre'>\n                    {JSON.stringify(params.value, null, 4)}\n                </Typography>\n            )}>\n                <Typography>\n                    {params.value ? params.value.imdbRating : null}\n                </Typography>\n            </Tooltip>\n        );\n        var columns = [{ \n            field: 'id',\n            headerName: 'Season',\n        }]\n        for (var i = 0; i < max; i++){\n            columns.push({ field: i + 1, renderCell });\n        }\n        console.log(columns)\n\n        return (\n            <DataGrid \n                rows={rows}\n                columns={columns}\n                // {...data}\n                autoHeight\n                className={classes.root}\n                getCellClassName={(params) => {\n                    if (params.field !== 'id'){\n                        return colors[10 - parseInt(params.value ? params.value.imdbRating : null)];\n                    }\n                }}\n            />\n        );\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div>\n                <Header\n                    text={this.state.text}\n                    onChange={this.onChange}\n                    onSubmit={this.onSubmit}\n                />\n                <Toolbar />\n\n                <div className={classes.root}>\n\n                    {this.ImageGridList()}\n                    <br />\n\n                    {this.RatingsMap()}\n                </div>\n            </div>\n            \n        );\n    }\n} // end CommentForm component\n\nexport default withStyles(useStyles)(CommentForm);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}