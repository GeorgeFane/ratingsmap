{"version":3,"sources":["Header.js","ImageGrid.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","alpha","palette","common","white","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","SearchAppBar","props","classes","className","AppBar","Toolbar","IconButton","href","Home","Typography","variant","Search","onSubmit","InputBase","value","text","onChange","placeholder","input","inputProps","target","GitHub","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","SimpleAccordion","items","rows","filter","tile","Poster","map","Grid","item","onClick","imdbID","src","alt","Title","container","justify","apikey","require","colors","split","url","s","params","axios","get","then","x","data","getShow","i","getSeason","Season","getAll","totalSeasons","requests","push","all","spread","responses","response","CommentForm","setText","console","log","setState","state","show","seasons","bind","event","preventDefault","this","a","Number","length","season","index","row","id","Episodes","forEach","episode","Episode","epNumbers","Object","keys","temp","Array","prototype","concat","max","Math","n","parseInt","renderCell","Tooltip","component","JSON","stringify","imdbRating","columns","field","headerName","getCellClassName","int","autoHeight","RatingsMap","React","Component","withStyles","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.25ac9cec.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport { alpha, makeStyles } from '@material-ui/core/styles';\nimport { GitHub, Home, Search } from '@material-ui/icons';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: alpha(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: alpha(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(1),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: '12ch',\n            '&:focus': {\n                width: '20ch',\n            },\n        },\n    },\n}));\n\nexport default function SearchAppBar(props) {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar>\n                <Toolbar>\n                    \n                    <IconButton\n                        color=\"inherit\"\n                        href='https://georgefane.github.io/'\n                    >\n                        <Home />\n                    </IconButton>\n\n                    <Typography variant=\"h6\" className={classes.title}>\n                        RatingsMap\n                    </Typography>\n\n                    <Typography variant=\"body1\" className={classes.title}>\n                        Generate heatmaps for TV show ratings\n                    </Typography>\n\n                    <div className={classes.search}>\n                        <div className={classes.searchIcon}>\n                            <Search />\n                        </div>\n\n                        <form onSubmit={props.onSubmit}>\n                            <InputBase\n                                value={props.text}\n                                onChange={props.onChange}\n                                placeholder=\"Search Show\"\n                                classes={{\n                                    root: classes.inputRoot,\n                                    input: classes.inputInput,\n                                }}\n                                inputProps={{ 'aria-label': 'search' }}\n                            />\n                        </form>\n                    </div>\n\n                    <IconButton\n                        color=\"inherit\"\n                        href='https://github.com/GeorgeFane/ratingsmap'\n                        target='_blank'\n                    >\n                        <GitHub />\n                    </IconButton>\n\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { TextField, Box, Grid, Toolbar, Tooltip, Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        fontWeight: theme.typography.fontWeightRegular,\n    },\n}));\n\nexport default function SimpleAccordion(props) {\n    const classes = useStyles();\n\n    const items = props.rows\n        .filter(tile => tile.Poster !== 'N/A')\n        .map(tile => (\n            <Grid\n                item\n                onClick={() => props.onClick(tile.imdbID)}\n            >\n                <img\n                    src={tile.Poster}\n                    alt={tile.Title}\n                    width={144}\n                />\n            </Grid>\n        ));\n\n    return (        \n        <Grid container justify='left' spacing={2}>\n            {items}\n        </Grid>\n    );\n\n    return (\n        <div className={classes.root}>\n            <Accordion>\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                >\n                    <Typography className={classes.heading}>\n                        Search Results\n                    </Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Grid container justify='left' spacing={2}>\n                        {items}\n                    </Grid>\n                </AccordionDetails>\n            </Accordion>\n        </div>\n    );\n}\n","import React from \"react\";\nimport axios from \"axios\";\n\nimport { TextField, Box, Grid, Toolbar, Tooltip, Typography } from '@material-ui/core';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { withStyles, createMuiTheme } from '@material-ui/core/styles';\n\nimport Header from './Header';\nimport ImageGrid from './ImageGrid';\n\nconst { apikey } = require('./env.json');\n\nvar colors = 'darkGreen darkGreen green goldenRod darkGoldenRod indianRed fireBrick fireBrick fireBrick fireBrick fireBrick'.split(' ');\nconst useStyles = theme => {\n    var root = { padding: theme.spacing(3) };\n    colors.forEach(color => {\n        root['& .' + color] = { backgroundColor: color };\n    })\n    return { root: root };\n};\n\n// api functions\nconst url = 'https://www.omdbapi.com/';\n\nfunction search(s) {\n    const params = { apikey, s };\n    return axios.get(url, { params })\n        .then(x => x.data.Search || []);\n}\n\nfunction getShow(i) {\n    const params = { apikey, i };\n    return axios.get(url, { params })\n        .then(x => x.data || []);\n}\n\nfunction getSeason(i, Season) {\n    const params = { apikey, i, Season };\n    return axios.get(url, { params });\n}\n\nfunction getAll(imdbID, totalSeasons) {\n    var requests = [];\n    for (var i = 0; i < totalSeasons; i++){\n        requests.push(\n            getSeason(imdbID, i + 1)\n        );\n    }\n    return axios.all(requests)\n        .then(axios.spread( (...responses) => (\n            responses.map(response => response.data) \n        )));\n}\n\nclass CommentForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: '',\n            rows: [],\n            show: {},\n            seasons: [],\n        }\n\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onClick = this.onClick.bind(this);\n    }\n    \n    // hooks\n\n    setText = text => {\n        console.log(text);\n        this.setState({ text });\n    };\n\n    onChange(event) { \n        event.preventDefault();     // prevents page from reloading on submit\n        const text = event.target.value;\n        console.log(text);\n        this.setState({ text });\n    }\n\n    async onSubmit(event) { \n        event.preventDefault();     // prevents page from reloading on submit\n        const rows = await search(this.state.text);\n        const show = {};\n        this.setState({ rows, show });\n    }\n    \n    async onClick(imdbID) {\n        const show = await getShow(imdbID);\n        const rows = [];\n        this.setState({ show, rows });\n\n        const seasons = await getAll(\n            this.state.show.imdbID,\n            Number(this.state.show.totalSeasons),\n        )\n        this.setState({ seasons });     \n    }\n\n    // components\n\n    RatingsMap() {        \n        const { classes } = this.props;\n\n        const { seasons } = this.state;\n        if (!seasons.length) {\n            return;\n        }\n\n        const rows = seasons.map( (season, index) => {\n            var row = { id: index + 1 };\n            season.Episodes.forEach(episode => {\n                row[episode.Episode] = episode;\n            });\n            return row;\n        });\n        console.log(rows);\n\n        const epNumbers = rows.map(row => Object.keys(row));\n        const temp = Array.prototype.concat(...epNumbers);\n        const max = Math.max(...temp\n            .filter(n => n !== 'id')\n            .map(n => parseInt(n)));\n\n        const renderCell = params => (            \n            <Tooltip title={(\n                <Typography component='pre'>\n                    {JSON.stringify(params.value, null, 4)}\n                </Typography>\n            )}>\n                <Typography>\n                    {params.value ? params.value.imdbRating : null}\n                </Typography>\n            </Tooltip>\n        );\n        var columns = [{ \n            field: 'id',\n            headerName: 'S\\\\E',\n        }]\n        for (var i = 0; i < max; i++){\n            columns.push({ field: i + 1, renderCell });\n        }\n        console.log(columns)\n\n        const getCellClassName = params => {\n            if (params.field !== 'id' && params.value) {\n                const int = parseInt(params.value.imdbRating);\n                return colors[10 - int];\n            }\n        }\n        const data = {\n            rows, columns, getCellClassName,\n            autoHeight: true,\n            className: classes.root,\n        }\n        return (\n            <div>\n                <Typography>\n                    *First row is the first season,\n                    second row is the second season, etc\n                </Typography>\n                <DataGrid {...data} />\n\n            </div>\n        );\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div>\n                <Header\n                    text={this.state.text}\n                    onChange={this.onChange}\n                    onSubmit={this.onSubmit}\n                />\n                <Toolbar />\n\n                <div className={classes.root}>\n                    <ImageGrid\n                        rows={this.state.rows}\n                        onClick={this.onClick}\n                    />\n\n                    {this.RatingsMap()}\n                </div>\n            </div>\n            \n        );\n    }\n} // end CommentForm component\n\nexport default withStyles(useStyles)(CommentForm);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}